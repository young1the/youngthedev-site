import Head from "next/head";
import { useTrackScroll } from "@/lib/trackScroll";
import Hero from "@/components/contents/Hero/Hero";
import Soundbar from "@/components/contents/Soundbar/Soundbar";
import Article from "@/components/contents/Article/Article";
import { NotionAPI, NotionPageRenderer } from "@/lib/notionAPI";
import NotionProjectsRenderer from "@/lib/notionAPI/renderer/NotionProjectsRenderer/NotionProjectRenderer";

export async function getStaticProps() {
  const seoulArticle = await NotionAPI.getArticleContents("seoul");
  const wantedArticle = await NotionAPI.getArticleContents("wanted");
  const projects = await NotionAPI.getProjects();
  return { props: { seoulArticle, wantedArticle, projects } };
}

export default function Home({ seoulArticle, wantedArticle, projects }: any) {
  const {
    soundbarWidth,
    currentTitle,
    trackRefs,
    onPlayClickHandler,
    onNextClickHandler,
    onPrevClickHandler,
  } = useTrackScroll();

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div
        style={{
          marginTop: "100px",
        }}
      >
        <Hero onClick={onPlayClickHandler} />
        <Soundbar
          width={soundbarWidth}
          title={currentTitle}
          onNextClickHandler={onNextClickHandler}
          onPrevClickHandler={onPrevClickHandler}
        />
        <Article ref={(ref) => (trackRefs.current[0] = ref)}></Article>
        <Article ref={(ref) => (trackRefs.current[1] = ref)}>
          <NotionPageRenderer notionPageContents={seoulArticle} />
        </Article>
        <Article ref={(ref) => (trackRefs.current[2] = ref)}>
          <NotionPageRenderer notionPageContents={wantedArticle} />
        </Article>
        <Article ref={(ref) => (trackRefs.current[3] = ref)}>
          <NotionProjectsRenderer projects={projects} />
        </Article>
        <Article ref={(ref) => (trackRefs.current[4] = ref)}></Article>
      </div>
    </>
  );
}
